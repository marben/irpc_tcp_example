package main

import (
	"irpc_tcp_example"
	"log"
	"net"
	"time"

	"github.com/marben/irpc"
)

func main() {
	serviceAddr := ":8080"

	log.Println("connecting to", serviceAddr)

	// standard net.Dial tcp connection
	tcpConn, err := net.Dial("tcp", serviceAddr)
	if err != nil {
		log.Fatalf("failed to connect: %v", err)
	}
	defer tcpConn.Close()

	// irpc.Endpoint is needed on both sides of connection.
	ep := irpc.NewEndpoint(tcpConn)

	// NewStringToolIRpcClient is generated by irpc command from our StringTool interface and implements our StringTool interface
	stringToolClient, err := irpc_tcp_example.NewStringToolIRpcClient(ep)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}

	strIn := "Říčany"
	// strIn := "ネコ"

	revStart := time.Now()
	resRev, err := stringToolClient.Reverse(strIn)
	if err != nil {
		log.Fatalf("Reverse(): %v", err)
	}
	revLat := time.Since(revStart)
	log.Printf("Reverse(%q) => %q [latency: %s]", strIn, resRev, revLat)

	repStart := time.Now()
	resRep, err := stringToolClient.Repeat(strIn, 3)
	if err != nil {
		log.Fatalf("Repeat(): %v", err)
	}
	repLat := time.Since(repStart)
	log.Printf("Repeat(%q, %d) => %q [latency: %s]", strIn, 3, resRep, repLat)
}
