package main

import (
	"irpc_tcp_example"
	"log"
	"net"
	"time"

	"github.com/marben/irpc"
)

func main() {
	log.Println("connecting to localhost:8080")

	// standard net.Dial tcp connection
	tcpConn, err := net.Dial("tcp", ":8080")
	if err != nil {
		log.Fatalf("failed to connect: %v", err)
	}
	defer tcpConn.Close()

	// irpc.Endpoint is needed on both sides of connection.
	ep := irpc.NewEndpoint(tcpConn)

	// irpc.NewEndpoint() can also register services, if client were to provide services to the server(bi-directional rpc). we don't do that here

	// NewMathIRpcClient is generated by irpc command from our Math interface and implements our Math interface
	mathClient, err := irpc_tcp_example.NewMathIRpcClient(ep)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}

	// NewStringToolIRpcClient is generated by irpc command from our StringTool interface and implements our StringTool interface
	stringToolClient, err := irpc_tcp_example.NewStringToolIRpcClient(ep)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}

	start := time.Now()
	res, err := mathClient.Add(1, 2)
	if err != nil {
		log.Fatalf("failed remote call: %v", err)
	}
	latency := time.Since(start)

	log.Printf("remote call Add(1, 2) ~=> %d (mind the skew of 8) [latency: %s]", res, latency)

	strIn := "Říčany"
	// strIn := "ネコ"

	revStart := time.Now()
	resRev, err := stringToolClient.Reverse(strIn)
	if err != nil {
		log.Fatalf("Reverse(): %v", err)
	}
	revLat := time.Since(revStart)
	log.Printf("Reverse(%q) => %q [latency: %s]", strIn, resRev, revLat)

	repStart := time.Now()
	resRep, err := stringToolClient.Repeat(strIn, 3)
	if err != nil {
		log.Fatalf("Repeat(): %v", err)
	}
	repLat := time.Since(repStart)
	log.Printf("Repeat(%q, %d) => %q [latency: %s]", strIn, 3, resRep, repLat)
}
