package main

import (
	"github.com/marben/irpc"
	"irpc_tcp_example"
	"log"
	"net"
)

func main() {
	log.Println("connecting to localhost:8080")

	// standard net.Dial tcp connection
	tcpConn, err := net.Dial("tcp", ":8080")
	if err != nil {
		log.Fatalf("failed to connect: %v", err)
	}
	defer tcpConn.Close()

	// irpc.Endpoint is needed on both sides of connection.
	// irpc.NewEndpoint() can also register services, if client were to provide services to the server. we don't do that here
	ep := irpc.NewEndpoint(tcpConn)

	// NewMathIRpcClient is generated by irpc command from our Math interface
	// implements our Math interface
	mathClient, err := irpc_tcp_example.NewMathIRpcClient(ep)
	if err != nil {
		log.Fatalf("failed to create client: %v", err)
	}

	res, err := mathClient.Add(1, 2)
	if err != nil {
		log.Fatalf("failed remote call: %v", err)
	}

	log.Printf("remote call Add(1, 2) ~=> %d (mind the skew of 8)", res)
}
